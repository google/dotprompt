#!/usr/bin/env bash
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Script to format all Java files in the workspace using google-java-format.

#set -x
set -euo pipefail

JAR_VERSION="1.27.0"
JAR_NAME="google-java-format-${JAR_VERSION}-all-deps.jar"
JAR_URL="https://github.com/google/google-java-format/releases/download/v${JAR_VERSION}/${JAR_NAME}"
CACHE_DIR=".cache"
JAR_PATH="${CACHE_DIR}/${JAR_NAME}"

# Create cache directory if it doesn't exist
mkdir -p "${CACHE_DIR}"

# Download the JAR if it doesn't exist
if [ ! -f "${JAR_PATH}" ]; then
  echo "Downloading ${JAR_NAME} to ${CACHE_DIR}..."
  # Using curl with -f to fail silently on server errors, -L to follow redirects, -o to specify output file
  if curl -fL "${JAR_URL}" -o "${JAR_PATH}"; then
    echo "Download successful."
  else
    echo "Error: Failed to download ${JAR_NAME}."
    echo "Please check the URL or your network connection."
    # Clean up partially downloaded file if curl failed
    rm -f "${JAR_PATH}"
    exit 1
  fi
else
  echo "${JAR_NAME} already exists in ${CACHE_DIR}."
fi

# Find all Java files in the current directory and its subdirectories
# Exclude files in .git, .cache, and any build or target directories commonly used in Java projects
JAVA_FILES=$(find . -type d \( -name .git -o -name .cache -o -name build -o -name target -o -name out \) -prune -o -name "*.java" -print)

if [ -z "${JAVA_FILES}" ]; then
  echo "No Java files found to format."
  exit 0
fi

echo "=== Formatting Java files... ==="

# Run google-java-format
# Note: google-java-format requires a JDK (not JRE) version >= 17 to run as of v1.25.0.
# The Java language version of the files being formatted can be older.
# The --add-exports flags might be needed depending on the JDK version used to run the JAR.
# Example for JDK 17+:
# java --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
#      --add-exports jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \
#      --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
#      --add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \
#      --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \
#      --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \
#      -jar "${JAR_PATH}" --replace ${JAVA_FILES}

# Simpler invocation (may require JDK configuration or specific JDK version to run):
java -jar "${JAR_PATH}" --replace ${JAVA_FILES}

echo "=== Java formatting complete. ==="
