#!/usr/bin/env bash
#
# Setup script for dotprompt engineering.
#
# Copyright 2025 Google LLC
# SPDX-License-Identifier: Apache-2.0

# TODO: This script is nowhere close to perfect. At a later date, we can replace
# this with something like nix to have a reproducible environment. For now this
# is a convenience script just to get eng started as quickly as possible.

if ((EUID == 0)) && [[ -z ${DANGEROUSLY_RUN_AS_ROOT+x} ]]; then
  echo "Please do not run as root unless DANGEROUSLY_RUN_AS_ROOT is set."
  exit 1
fi

[[ ${EUID} != 0 ]] && set -euo pipefail

TOP_DIR=$(git rev-parse --show-toplevel)

PNPM_VERSION="10.2.0"
NODE_VERSION="23"
NVM_VERSION="0.40.1"
GOLANGCI_LINT_VERSION="1.64.6"

AUDIENCE="eng"
while getopts ":a:" opt; do
  case ${opt} in
  a)
    AUDIENCE="${OPTARG}"
    ;;
  \?)
    echo "Invalid option: -${OPTARG}" >&2
    exit 1
    ;;
  *)
    echo "Unsupported option: -${OPTARG}" >&2
    exit 1
    ;;
  esac
done

if [[ -z ${AUDIENCE} ]]; then
  echo "Audience flag (-a) is required."
  echo "Usage: $0 -a <eng|ci>"
  exit 1
fi

OS_NAME=$(uname)

PYTHON_CLI_TOOLS=(
  "httpie" # HTTP client.                  See: https://httpie.io/
  "mypy"   # Static type checker.          See: https://mypy.readthedocs.io/en/stable/
  "ruff"   # Fast linter.                  See: https://github.com/astral-sh/ruff
)

# Updates your shell profile to include a path.
function dotpromptz::update_path() {
  local new_path="$1"

  # Remove trailing slash if present.
  new_path="${new_path%/}"

  # Check if path is already in PATH
  if [[ ":$PATH:" != *":$new_path:"* ]]; then
    if [ -n "${ZSH_VERSION-}" ]; then
      echo "export PATH=\"$new_path:\$PATH\"" >>"$HOME/.zshrc"
    else
      echo "export PATH=\"$new_path:\$PATH\"" >>"$HOME/.bashrc"
    fi

    export PATH="$new_path:$PATH"
    echo "Path $new_path added successfully"
  else
    echo "Path $new_path already exists in PATH"
  fi
}

function dotpromptz::preconfigure_environment() {
  git clean -Xfd
  dotpromptz::update_path "$HOME/.cargo/bin"
  dotpromptz::update_path "$HOME/.local/bin"
  dotpromptz::update_path "$HOME/.local/share/pnpm"
  dotpromptz::update_path "$HOME/go/bin"
  dotpromptz::update_path "$HOME/google-cloud-sdk/bin"
}

# Install all the required tools common to all audiences.
function dotpromptz::install_prerequisites() {
  dotpromptz::preconfigure_environment

  if [[ ${OS_NAME} == "Darwin" && -x "$(command -v brew)" ]]; then
    # Darwin-based systems.
    brew install \
      cmake \
      curl \
      fd \
      gh \
      go \
      python3 \
      ripgrep
  elif [[ -x "$(command -v apt)" ]]; then
    # Check if the OS is Ubuntu 22.04 (or a derivative) since some of our eng
    # use it.
    if lsb_release -a | grep -q "Description:.*Ubuntu 22.04"; then
      sudo add-apt-repository -y ppa:longsleep/golang-backports
      sudo apt update
      sudo apt install -y golang-go
    else
      sudo apt install -y golang
    fi

    # Debian-based systems.
    sudo apt install -y \
      cmake \
      curl \
      fd-find \
      gh \
      python3 \
      ripgrep

  elif [[ -x "$(command -v dnf)" ]]; then
    # Fedora-based systems.
    sudo dnf install -y \
      cmake \
      curl \
      fd-find \
      gh \
      go \
      python3 \
      ripgrep
  else
    echo "Unsupported OS. Please install tools manually."
  fi

  dotpromptz::install_golangci_lint
  dotpromptz::install_rust
  dotpromptz::install_uv
  dotpromptz::install_and_configure_nvm
  dotpromptz::install_pnpm
}

function dotpromptz::install_golangci_lint() {
  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh |
    sh -s -- -b $(go env GOPATH)/bin "v${GOLANGCI_LINT_VERSION}"
}

function dotpromptz::install_rust() {
  # Install rust.
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  rustup update
}

# Install uv for Python versioning, packaging, and workspace management.
function dotpromptz::install_uv() {
  curl -LsSf https://astral.sh/uv/install.sh | sh
}

# Install pnpm for JavaScript package management.
# See: https://github.com/pnpm/pnpm/issues/6217
function dotpromptz::install_pnpm() {
  curl -fsSL https://get.pnpm.io/install.sh |
    env ENV="$HOME/.bashrc" \
      SHELL="$(which bash)" \
      PNPM_VERSION="${PNPM_VERSION}" \
      bash -
}

# Install node version manager.
function dotpromptz::install_and_configure_nvm() {
  export NVM_DIR="$HOME/.config/nvm"
  mkdir -p "$NVM_DIR"
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v${NVM_VERSION}/install.sh | bash
  [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"                   # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion" # This loads nvm bash_completion
  nvm install "${NODE_VERSION}"
  nvm use "${NODE_VERSION}"
  nvm alias default "${NODE_VERSION}"
}
# Install the Google Cloud SDK.
function dotpromptz::install_google_cloud_sdk() {
  # This depends on Python 3.11 and installs it for the user on some systems.
  if command -v gcloud &>/dev/null; then
    gcloud config set disable_usage_reporting true
    gcloud components update
  else
    curl https://sdk.cloud.google.com | bash -s -- --disable-prompts
    gcloud config set disable_usage_reporting true
  fi
}

# Install all the required tools that have been written in Go.
function dotpromptz::install_go_cli_tools_ci() {
  go install github.com/google/go-licenses@latest
  go install golang.org/x/vuln/cmd/govulncheck@latest
  go install oss.terrastruct.com/d2@latest
}

# Install all the required tools that have been written in Go.
function dotpromptz::install_go_cli_tools_eng() {
  go install github.com/Gelio/go-global-update@latest
  go install github.com/captainhook-go/captainhook/cmd/captainhook@latest
  go install github.com/google/addlicense@latest
  go install github.com/google/go-licenses@latest
  go install github.com/jesseduffield/lazygit@latest
  go install golang.org/x/vuln/cmd/govulncheck@latest
  go install oss.terrastruct.com/d2@latest
}

# Install all the required tools that have been written in Rust.  We're assuming
# that the user has already installed rust and cargo.
function dotpromptz::install_cargo_cli_tools_eng() {
  cargo install --locked \
    convco \
    pylyzer \
    rust-parallel \
    taplo-cli
}

# Install all the Python-related formatter and static analysis tools.
function dotpromptz::install_python_cli_tools() {
  for package in "${PYTHON_CLI_TOOLS[@]}"; do
    uv tool install "${package}"
  done
}

# Install documentation site generator.
function dotpromptz::install_docs_cli_tools() {
  # Install d2.
  curl -fsSL https://d2lang.com/install.sh | sh -s --

  # Engineering documentation site generator.
  # See: https://squidfunk.github.io/mkdocs-material/
  uv tool install \
    mkdocs \
    --with mkdocs-autorefs \
    --with mkdocs-d2-plugin \
    --with mkdocs-literate-nav \
    --with mkdocs-material \
    --with mkdocs-mermaid2-plugin \
    --with mkdocs-minify-plugin \
    --with mkdocstrings[python]
}

# Configure the commit message template.
function dotpromptz::configure_commit_template() {
  echo "Setting up commit message template..."
  ln -sf "${TOP_DIR}/COMMIT_MESSAGE_TEMPLATE" "${TOP_DIR}/.git/COMMIT_MESSAGE_TEMPLATE"
  git config commit.template "${TOP_DIR}/.git/COMMIT_MESSAGE_TEMPLATE"
}

# Install pre-commit hooks.
function dotpromptz::install_pre_commit_hooks() {
  dotpromptz::configure_commit_template
  captainhook install -f -c "${TOP_DIR}/captainhook.json"
}

# Install all the common packages.
function dotpromptz::install_common_packages() {
  dotpromptz::install_prerequisites
  dotpromptz::install_python_cli_tools
  dotpromptz::install_docs_cli_tools
}

# Install all the required tools for CI.
function dotpromptz::install_ci_packages() {
  dotpromptz::install_common_packages
  dotpromptz::install_go_cli_tools_ci
}

# Install all the required tools for engineering.
function dotpromptz::install_eng_packages() {
  dotpromptz::install_common_packages
  dotpromptz::install_go_cli_tools_eng
  dotpromptz::install_cargo_cli_tools_eng
  dotpromptz::install_pre_commit_hooks
  dotpromptz::install_google_cloud_sdk
}

# Entry point for the setup script.
function dotpromptz::main() {
  case "${AUDIENCE}" in
  eng)
    dotpromptz::install_eng_packages
    ;;
  ci)
    dotpromptz::install_ci_packages
    ;;
  *)
    echo "Unsupported audience: ${AUDIENCE}"
    exit 1
    ;;
  esac

  echo "Please restart your shell."
}

dotpromptz::main
