# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: simple_scalar_no_description
  template: |
    ---
    output:
      schema: string
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema: { type: string }
- name: input_and_output
  template: |
    ---
    input:
      schema: string
    output:
      schema: string
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema: { type: string }
        input:
          schema: { type: string }
- name: simple_scalar_description
  template: |
    ---
    output:
      schema: number, the description
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema: { type: number, description: "the description" }
- name: simple_scalar_description_no_whitespace
  template: |
    ---
    output:
      schema: number,the description
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema: { type: number, description: "the description" }
- name: simple_scalar_description_with_commas
  template: |
    ---
    output:
      schema: number,the description, which has, multiple commas
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema: { type: number, description: "the description, which has, multiple commas" }
- name: simple_scalar_description_extra_whitespace
  template: |
    ---
    output:
      schema: number,    the description
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema: { type: number, description: "the description" }
- name: simple_object
  template: |
    ---
    output:
      schema:
        field1: boolean
        field2: string
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            additionalProperties: false
            properties:
              field1: { type: boolean }
              field2: { type: string }
            required: ["field1", "field2"]
- name: required_field
  template: |
    ---
    output:
      schema:
        req: string, required field
        nonreq?: boolean, optional field
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            additionalProperties: false
            properties:
              req: { type: string, description: "required field" }
              nonreq: { type: [boolean, "null"], description: "optional field" }
            required: ["req"]
- name: array_of_scalars
  template: |
    ---
    output:
      schema:
        tags(array, list of tags): string, the tag
        vector(array): number
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            additionalProperties: false
            properties:
              tags:
                type: array
                description: "list of tags"
                items: { type: string, description: "the tag" }
              vector:
                type: array
                items: { type: number }
            required: ["tags", "vector"]
- name: nested_object_in_array_and_out
  template: |
    ---
    output:
      schema:
        obj?(object, a nested object):
          nest1?: string
        arr(array, array of objects):
          nest2?: boolean
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            additionalProperties: false
            properties:
              obj:
                type: [object, "null"]
                description: "a nested object"
                additionalProperties: false
                properties:
                  nest1: { type: [string, "null"] }
              arr:
                type: array
                description: "array of objects"
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    nest2: { type: [boolean, "null"] }
            required: ["arr"]

- name: simple_json_schema_type
  template: |
    ---
    output:
      schema:
        type: string
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: string

- name: inferred_json_schema_from_properties
  template: |
    ---
    output:
      schema:
        properties:
          foo: {type: string}
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            properties:
              foo: { type: string }

- name: enum_field
  template: |
    ---
    output:
      schema:
        color?(enum, the enum): [RED, BLUE, GREEN]
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            properties:
              color:
                description: "the enum"
                enum: ["RED", "BLUE", "GREEN", null]
            additionalProperties: false

- name: any_field
  template: |
    ---
    output:
      schema:
        first: any
        second?: any, could be anything
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            properties:
              first: {}
              second: { description: "could be anything" }
            additionalProperties: false
            required: ["first"]

- name: wildcard_fields_with_other_fields
  template: |
    ---
    output:
      schema:
        otherField: string, another string
        (*): any, whatever you want
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            additionalProperties: { description: "whatever you want" }
            properties:
              otherField: { description: "another string", type: string }
            required: ["otherField"]
            type: object

- name: wildcard_fields_without_other_fields
  template: |
    ---
    output:
      schema:
        (*): number, lucky number
    ---
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            additionalProperties: { type: number, description: "lucky number" }
            properties: {}
            type: object
- name: named_schema_override_description
  template: |
    ---
    output:
      schema: Foo, an overridden foo
    ---
  schemas:
    Foo:
      type: number
      description: a foo
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: number
            description: an overridden foo
- name: nested_named_schema
  template: |
    ---
    output:
      schema:
        foo: Foo
        foo2?: Foo, this one is optional
    ---
  schemas:
    Foo:
      type: number
      description: a foo
  tests:
    - desc: returns as expected
      expect:
        messages: []
        output:
          schema:
            type: object
            additionalProperties: false
            required: [foo]
            properties:
              foo:
                type: number
                description: a foo
              foo2:
                type: [number, "null"]
                description: this one is optional
